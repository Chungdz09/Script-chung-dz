local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

-- Config
local lockRange = 2000
local rotationSpeed = 1
local fovAngle = 16
local visualFovRadius = 100
local toggleKey = Enum.KeyCode.F
local maxTargetSpeed = 50

local localPlayer = Players.LocalPlayer
local camera = workspace.CurrentCamera
local lockedPlayer = nil
local lockingOn = false
local lockEnabled = true

local fovCircle = nil

local function createFOVCircle()
    if fovCircle then return end
    fovCircle = Drawing.new("Circle")
    fovCircle.Color = Color3.fromRGB(255, 0, 0)
    fovCircle.Thickness = 2
    fovCircle.Radius = visualFovRadius
    fovCircle.Filled = false
    fovCircle.Transparency = 1
    fovCircle.Visible = true
end

local function removeFOVCircle()
    if fovCircle then
        fovCircle:Remove()
        fovCircle = nil
    end
end

local function findNearestPlayerInFOV()
    if not localPlayer.Character or not localPlayer.Character:FindFirstChild("Head") then
        return nil
    end

    local localPos = localPlayer.Character.Head.Position
    local camLook = camera.CFrame.LookVector

    local nearest = nil
    local shortestDistance = lockRange

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= localPlayer and player.Character and player.Character:FindFirstChild("Head") then
            if player.Team ~= localPlayer.Team then
                local targetPos = player.Character.Head.Position
                local distance = (targetPos - localPos).Magnitude

                if distance < shortestDistance then
                    local dirToTarget = (targetPos - localPos).Unit
                    local dot = math.clamp(camLook:Dot(dirToTarget), -1, 1)
                    local angle = math.deg(math.acos(dot))

                    if angle < fovAngle then
                        shortestDistance = distance
                        nearest = player
                    end
                end
            end
        end
    end

    return nearest
end

local function lockOn()
    local candidate = findNearestPlayerInFOV()
    if candidate and candidate.Character and candidate.Character:FindFirstChild("HumanoidRootPart") then
        local hrp = candidate.Character:FindFirstChild("HumanoidRootPart")
        local speed = hrp.Velocity.Magnitude

        if speed <= maxTargetSpeed then
            local humanoid = candidate.Character:FindFirstChild("Humanoid")
            if humanoid and humanoid.Health > 0 then
                lockedPlayer = candidate
                lockingOn = true
                print("Locked on:", lockedPlayer.Name)
                return
            end
        end
    end

    print("No valid target to lock on.")
end

local function releaseLock()
    lockingOn = false
    lockedPlayer = nil
end

local function toggleLock()
    lockEnabled = not lockEnabled
    print("Lock enabled:", lockEnabled)
    if lockEnabled then
        createFOVCircle()
    else
        releaseLock()
        removeFOVCircle()
    end
end

-- Init FOV Circle
createFOVCircle()

UserInputService.InputBegan:Connect(function(input, gp)
    if gp then return end
    if input.KeyCode == toggleKey then
        toggleLock()
    elseif input.UserInputType == Enum.UserInputType.MouseButton2 then
        if lockEnabled then
            lockOn()
        end
    end
end)

UserInputService.InputEnded:Connect(function(input, gp)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        releaseLock()
    end
end)

RunService:BindToRenderStep("LockOnSystem", Enum.RenderPriority.Camera.Value + 1, function()
    if lockEnabled and fovCircle then
        local mousePos = UserInputService:GetMouseLocation()
        fovCircle.Position = Vector2.new(mousePos.X, mousePos.Y)
    end

    if lockEnabled and lockingOn and lockedPlayer and lockedPlayer.Character then
        local character = lockedPlayer.Character
        local humanoid = character:FindFirstChild("Humanoid")
        local hrp = character:FindFirstChild("HumanoidRootPart")
        local head = character:FindFirstChild("Head")

        if not humanoid or humanoid.Health <= 0 then
            print("Target is dead. Releasing lock.")
            releaseLock()
            return
        end

        if hrp then
            local speed = hrp.Velocity.Magnitude
            if speed > maxTargetSpeed then
                print("Target moving too fast. Releasing lock.")
                releaseLock()
                return
            end
        end

        if head then
            local targetPos = head.Position
            local direction = (targetPos - camera.CFrame.Position).Unit
            local camLook = camera.CFrame.LookVector
            local angle = math.deg(math.acos(math.clamp(camLook:Dot(direction), -1, 1)))

            if angle > fovAngle then
                print("Target moved out of FOV. Releasing lock.")
                releaseLock()
                return
            end

            local targetCFrame = CFrame.new(camera.CFrame.Position, camera.CFrame.Position + direction)
            camera.CFrame = camera.CFrame:Lerp(targetCFrame, rotationSpeed)
        end
    end
end)

pcall(function()
    game.StarterGui:SetCore("SendNotification", {
        Title = "Auto Lock-On",
        Text = "Loaded. Press F to toggle.",
        Duration = 4,
    })
end)
