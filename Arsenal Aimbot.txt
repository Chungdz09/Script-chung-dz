local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local GuiService = game:GetService("GuiService")

-- Configuration
local lockRange = 10000
local screenRadius = 100
local rotationSpeed = 1
local teleportThreshold = 15

local localPlayer = Players.LocalPlayer
local camera = workspace.CurrentCamera

local lockedPlayer = nil
local lockingOn = false
local holdingRightClick = false
local uiVisible = true
local teamCheckEnabled = true
local lastTargetPosition = nil

-- GUI Setup
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "TargetLockUI"
screenGui.ResetOnSpawn = false
screenGui.Parent = localPlayer:WaitForChild("PlayerGui")

local infoLabel = Instance.new("TextLabel")
infoLabel.Size = UDim2.new(0, 220, 0, 40)
infoLabel.Position = UDim2.new(0, 10, 0, 10)
infoLabel.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
infoLabel.BorderSizePixel = 0
infoLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
infoLabel.TextScaled = true
infoLabel.Font = Enum.Font.SourceSansBold
infoLabel.Text = "Target: None"
infoLabel.Visible = true
infoLabel.Parent = screenGui

-- FOV Circle (r·ªóng b√™n trong, vi·ªÅn ƒë·ªè)
local fovFrame = Instance.new("Frame")
fovFrame.Size = UDim2.new(0, screenRadius * 2, 0, screenRadius * 2)
fovFrame.AnchorPoint = Vector2.new(0.5, 0.5)
fovFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
fovFrame.BackgroundTransparency = 1
fovFrame.BorderSizePixel = 0
fovFrame.Visible = true
fovFrame.ZIndex = 999
fovFrame.Parent = screenGui

local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(1, 9999)
corner.Parent = fovFrame

local stroke = Instance.new("UIStroke")
stroke.Color = Color3.fromRGB(255, 0, 0)
stroke.Thickness = 2
stroke.Transparency = 0
stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
stroke.Parent = fovFrame

-- Drag UI
local dragging = false
local dragStart, startPos

infoLabel.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		dragging = true
		dragStart = input.Position
		startPos = infoLabel.Position
	end
end)

infoLabel.InputEnded:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		dragging = false
	end
end)

UserInputService.InputChanged:Connect(function(input)
	if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
		local delta = input.Position - dragStart
		infoLabel.Position = startPos + UDim2.new(0, delta.X, 0, delta.Y)
	end
end)

-- Helpers
local function updateUI()
	if lockedPlayer and lockedPlayer.Character then
		local teamText = teamCheckEnabled and "(TeamCheck)" or "(Unenable TeamCheck)"
		infoLabel.Text = "Target: " .. lockedPlayer.Name .. " " .. teamText
	else
		local teamText = teamCheckEnabled and "(0eamCheck)" or "(Unenable TeamCheck)"
		infoLabel.Text = "Target: None " .. teamText
	end
end

local function isInMouseCircle(worldPosition, mousePos)
	local screenPoint, onScreen = camera:WorldToViewportPoint(worldPosition)
	if not onScreen then return false end

	local distance = (Vector2.new(screenPoint.X, screenPoint.Y) - mousePos).Magnitude
	return distance <= screenRadius
end

local function findClosestPlayerInFOV(mousePos)
	local closestPlayer = nil
	local shortestDistance = math.huge

	for _, player in ipairs(Players:GetPlayers()) do
		if player ~= localPlayer and player.Character and player.Character:FindFirstChild("Head") then
			if teamCheckEnabled and player.Team == localPlayer.Team then
				continue
			end

			local head = player.Character.Head
			local screenPoint, onScreen = camera:WorldToViewportPoint(head.Position)

			if onScreen then
				local distance = (Vector2.new(screenPoint.X, screenPoint.Y) - mousePos).Magnitude
				if distance <= screenRadius and distance < shortestDistance then
					closestPlayer = player
					shortestDistance = distance
				end
			end
		end
	end

	return closestPlayer
end

-- Input handling
UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then return end

	if input.UserInputType == Enum.UserInputType.MouseButton2 then
		holdingRightClick = true
	elseif input.KeyCode == Enum.KeyCode.F1 then
		uiVisible = not uiVisible
		infoLabel.Visible = uiVisible
		fovFrame.Visible = uiVisible
	elseif input.KeyCode == Enum.KeyCode.T then
		teamCheckEnabled = not teamCheckEnabled
		updateUI()
	end
end)

UserInputService.InputEnded:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton2 then
		holdingRightClick = false
		lockingOn = false
	end
end)

-- Camera follow
RunService.RenderStepped:Connect(function()
	local mousePos = UserInputService:GetMouseLocation() - GuiService:GetGuiInset()
	fovFrame.Position = UDim2.new(0, mousePos.X, 0, mousePos.Y)

	if holdingRightClick and (not lockedPlayer or not lockingOn) then
		local target = findClosestPlayerInFOV(mousePos)
		if target then
			lockedPlayer = target
			lockingOn = true
			updateUI()
		end
	end

	if lockingOn and lockedPlayer and lockedPlayer.Character then
		local head = lockedPlayer.Character:FindFirstChild("Head")
		local humanoid = lockedPlayer.Character:FindFirstChild("Humanoid")

		if not head or not humanoid or humanoid.Health <= 0 then
			lockedPlayer = nil
			lockingOn = false
			lastTargetPosition = nil
			updateUI()
			return
		end

		if lastTargetPosition then
			local movedDistance = (head.Position - lastTargetPosition).Magnitude
			if movedDistance >= teleportThreshold then
				lockedPlayer = nil
				lockingOn = false
				lastTargetPosition = nil
				updateUI()
				return
			end
		end

		lastTargetPosition = head.Position

		local direction = (head.Position - camera.CFrame.Position).Unit
		local targetCFrame = CFrame.new(camera.CFrame.Position, camera.CFrame.Position + direction)
		camera.CFrame = camera.CFrame:Lerp(targetCFrame, rotationSpeed)
	else
		lastTargetPosition = nil
	end
end)

-- Notify
game.StarterGui:SetCore("SendNotification", {
	Title = "üéØ Target Lock",
	Text = "Gi·ªØ chu·ªôt ph·∫£i ƒë·ªÉ ng·∫Øm | F1: ·∫®n/Hi·ªán | T: B·∫≠t/T·∫Øt team check",
	Duration = 6,
})
